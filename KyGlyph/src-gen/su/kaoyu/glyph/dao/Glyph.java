package su.kaoyu.glyph.dao;

import su.kaoyu.glyph.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import android.graphics.Path;
import de.greenrobot.dao.AbstractDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "GLYPH".
 */
public class Glyph extends su.kaoyu.glyph.bean.Glyph  {

    private long id;
    /** Not-null value. */
    private String glyphOrder;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient GlyphDao myDao;


    // KEEP FIELDS - put your custom fields here
    public Glyph() {
    }

    public Glyph(String glyphOrder) {
        super(glyphOrder);
        this.glyphOrder = glyphOrder;
        setId(hashCode());
    }
    // KEEP FIELDS END


    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getGlyphDao() : null;
    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getGlyphOrder() {
        return glyphOrder;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setGlyphOrder(String glyphOrder) {
        this.glyphOrder = glyphOrder;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    public Path getGlyphPath(int size) {
        if (glyphPath == null) {
            init(glyphOrder);
        }
        return scalePath(new Path(glyphPath), size, size * DOTS_PADDING);
    }

    @Override
    public boolean equals(Object o) {
        return o != null && o instanceof Glyph && getId() == ((Glyph) o).getId();
    }
    // KEEP METHODS END

}

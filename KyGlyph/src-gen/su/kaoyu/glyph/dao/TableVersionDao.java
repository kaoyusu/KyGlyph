package su.kaoyu.glyph.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import su.kaoyu.glyph.dao.TableVersion;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TABLE_VERSION".
*/
public class TableVersionDao extends AbstractDao<TableVersion, String> {

    public static final String TABLENAME = "TABLE_VERSION";

    /**
     * Properties of entity TableVersion.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property TableName = new Property(0, String.class, "tableName", true, "TABLE_NAME");
        public final static Property Version = new Property(1, Integer.class, "version", false, "VERSION");
    };

    private DaoSession daoSession;


    public TableVersionDao(DaoConfig config) {
        super(config);
    }
    
    public TableVersionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TABLE_VERSION\" (" + //
                "\"TABLE_NAME\" TEXT PRIMARY KEY NOT NULL ," + // 0: tableName
                "\"VERSION\" INTEGER);"); // 1: version
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TABLE_VERSION\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TableVersion entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getTableName());
 
        Integer version = entity.getVersion();
        if (version != null) {
            stmt.bindLong(2, version);
        }
    }

    @Override
    protected void attachEntity(TableVersion entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TableVersion readEntity(Cursor cursor, int offset) {
        TableVersion entity = new TableVersion( //
            cursor.getString(offset + 0), // tableName
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1) // version
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TableVersion entity, int offset) {
        entity.setTableName(cursor.getString(offset + 0));
        entity.setVersion(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(TableVersion entity, long rowId) {
        return entity.getTableName();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(TableVersion entity) {
        if(entity != null) {
            return entity.getTableName();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

package su.kaoyu.glyph.dao;

import android.database.sqlite.SQLiteDatabase;

import java.util.Map;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.AbstractDaoSession;
import de.greenrobot.dao.identityscope.IdentityScopeType;
import de.greenrobot.dao.internal.DaoConfig;

import su.kaoyu.glyph.dao.Glyph;
import su.kaoyu.glyph.dao.GlyphName;
import su.kaoyu.glyph.dao.GlyphSequence;
import su.kaoyu.glyph.dao.TableVersion;

import su.kaoyu.glyph.dao.GlyphDao;
import su.kaoyu.glyph.dao.GlyphNameDao;
import su.kaoyu.glyph.dao.GlyphSequenceDao;
import su.kaoyu.glyph.dao.TableVersionDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see de.greenrobot.dao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig glyphDaoConfig;
    private final DaoConfig glyphNameDaoConfig;
    private final DaoConfig glyphSequenceDaoConfig;
    private final DaoConfig tableVersionDaoConfig;

    private final GlyphDao glyphDao;
    private final GlyphNameDao glyphNameDao;
    private final GlyphSequenceDao glyphSequenceDao;
    private final TableVersionDao tableVersionDao;

    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        glyphDaoConfig = daoConfigMap.get(GlyphDao.class).clone();
        glyphDaoConfig.initIdentityScope(type);

        glyphNameDaoConfig = daoConfigMap.get(GlyphNameDao.class).clone();
        glyphNameDaoConfig.initIdentityScope(type);

        glyphSequenceDaoConfig = daoConfigMap.get(GlyphSequenceDao.class).clone();
        glyphSequenceDaoConfig.initIdentityScope(type);

        tableVersionDaoConfig = daoConfigMap.get(TableVersionDao.class).clone();
        tableVersionDaoConfig.initIdentityScope(type);

        glyphDao = new GlyphDao(glyphDaoConfig, this);
        glyphNameDao = new GlyphNameDao(glyphNameDaoConfig, this);
        glyphSequenceDao = new GlyphSequenceDao(glyphSequenceDaoConfig, this);
        tableVersionDao = new TableVersionDao(tableVersionDaoConfig, this);

        registerDao(Glyph.class, glyphDao);
        registerDao(GlyphName.class, glyphNameDao);
        registerDao(GlyphSequence.class, glyphSequenceDao);
        registerDao(TableVersion.class, tableVersionDao);
    }
    
    public void clear() {
        glyphDaoConfig.getIdentityScope().clear();
        glyphNameDaoConfig.getIdentityScope().clear();
        glyphSequenceDaoConfig.getIdentityScope().clear();
        tableVersionDaoConfig.getIdentityScope().clear();
    }

    public GlyphDao getGlyphDao() {
        return glyphDao;
    }

    public GlyphNameDao getGlyphNameDao() {
        return glyphNameDao;
    }

    public GlyphSequenceDao getGlyphSequenceDao() {
        return glyphSequenceDao;
    }

    public TableVersionDao getTableVersionDao() {
        return tableVersionDao;
    }

}
